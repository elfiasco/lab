function [outcomes, outcomeString] = cgOutcomes(timeVect, accelData, rotData, gyroData, fs, personHeight, isPostQuat, isAndroid, debugFlag)

%% Create data segments
[accelDataSegments, rotDataSegments, gyroDataSegments] = cgCreateSegments(timeVect, accelData, rotData, gyroData);

%% Find outcomes for each segment
gSymIndex = NaN .* ones(2, 1);
stepLengths = cell(2, 1);
leftStepLengths = cell(2, 1);
rightStepLengths = cell(2, 1);
stepTimes = cell(2, 1);
leftStepTimes = cell(2, 1);
rightStepTimes = cell(2, 1);

for i = 1:2
    [gSymIndex(i), ...
        stepLengths{i}, leftStepLengths{i}, rightStepLengths{i}, ...
        stepTimes{i}, leftStepTimes{i}, rightStepTimes{i}] ...
        = cgsOutcomes(accelDataSegments{i}, rotDataSegments{i}, gyroDataSegments{i}, fs, personHeight, isPostQuat, isAndroid, debugFlag);
end

%% Create outcome variables
stepCount = cellfun(@length, stepLengths);

meanSymIndex = median(gSymIndex) * 100;

meanStepLength = median([stepLengths{:}]);
meanStepLengthLeft = median([leftStepLengths{:}]);
meanStepLengtRight = median([rightStepLengths{:}]);
stdStepLengthLeft = iqr([leftStepLengths{:}])/1.35;
stdStepLengtRight = iqr([rightStepLengths{:}])/1.35;

meanStepTime = median([stepTimes{:}]);
meanStepTimeLeft = median([leftStepTimes{:}]);
meanStepTimeRight = median([rightStepTimes{:}]);
stdStepTimeLeft = iqr([leftStepTimes{:}])/1.35;
stdStepTimeRight = iqr([rightStepTimes{:}])/1.35;

stepLengthVariability = (sqrt((stdStepLengthLeft^2 + stdStepLengtRight^2) / 2)) / meanStepLength * 100;
stepTimeVariability = (sqrt((stdStepTimeLeft^2 + stdStepTimeRight^2) / 2)) / meanStepTime * 100;
stepLengthASymmetry = abs(meanStepLengthLeft - meanStepLengtRight) / meanStepLength * 100;
stepTimeASymmetry = abs(meanStepTimeLeft - meanStepTimeRight) / meanStepTime * 100;
meanStepVelocity = median([stepLengths{:}] ./ [stepTimes{:}]);

stepCountLA = stepCount(1);
stepCountLB = stepCount(2);



%% Create outcomes and description string
outcomes = [posixtime(datetime('now', 'TimeZone', 'local')), ...
    meanSymIndex, ...
    meanStepLength, ...
    meanStepTime, ...
    stepLengthVariability, ...
    stepTimeVariability, ...
    stepLengthASymmetry, ...
    stepTimeASymmetry, ...
    meanStepVelocity,...
    stepCountLA,...
    stepCountLB
    ];
outcomeString = sprintf(strcat('Time of computation (unix): %0.16f\n', ...
    'Gait symmetry: %0.16f percent\n', ...
    'Step length: %0.16f m\n', ...
    'Step time: %0.16f sec\n', ...
    'Step length variability: %0.16f percent\n', ...
    'Step time variability: %0.16f percent\n', ...
    'Step length asymmetry: %0.16f percent\n', ...
    'Step time asymmetry: %0.16f percent\n', ...
    'Step velocity: %0.16f m/sec\n', ...
    'Step count lap 1: %d\n', ...
    'Step count lap 2: %d\n'),...
    outcomes(1), ...
    outcomes(2), ...
    outcomes(3), ...
    outcomes(4), ...
    outcomes(5), ...
    outcomes(6), ...
    outcomes(7), ...
    outcomes(8),...
    outcomes(9),...
    outcomes(10),...
    outcomes(11));
end
